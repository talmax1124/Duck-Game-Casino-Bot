[
    {
        "label": "discord",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord",
        "description": "discord",
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "discord.ui",
        "description": "discord.ui",
        "isExtraImport": true,
        "detail": "discord.ui",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "discord.ext.commands",
        "description": "discord.ext.commands",
        "isExtraImport": true,
        "detail": "discord.ext.commands",
        "documentation": {}
    },
    {
        "label": "cooldown",
        "importPath": "discord.ext.commands",
        "description": "discord.ext.commands",
        "isExtraImport": true,
        "detail": "discord.ext.commands",
        "documentation": {}
    },
    {
        "label": "BucketType",
        "importPath": "discord.ext.commands",
        "description": "discord.ext.commands",
        "isExtraImport": true,
        "detail": "discord.ext.commands",
        "documentation": {}
    },
    {
        "label": "generate_duck_game_image",
        "importPath": "utils.image_generator",
        "description": "utils.image_generator",
        "isExtraImport": true,
        "detail": "utils.image_generator",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageFont",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageDraw",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageFont",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "DuckGameView",
        "kind": 6,
        "importPath": "commands.duckgame",
        "description": "commands.duckgame",
        "peekOfCode": "class DuckGameView(View):\n    def __init__(self, user, amount, wallet, multiplier, username):\n        super().__init__(timeout=None)\n        self.user = user\n        self.amount = float(amount)\n        self.position = -1  # Start duck in the grass\n        self.hazard_pos = None\n        self.started = False\n        self.session_wallet = self.amount  # session wallet to track current winnings\n        self.wallet = wallet  # user's real wallet (static during game)",
        "detail": "commands.duckgame",
        "documentation": {}
    },
    {
        "label": "DuckGame",
        "kind": 6,
        "importPath": "commands.duckgame",
        "description": "commands.duckgame",
        "peekOfCode": "class DuckGame(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.active_sessions = set()\n    @commands.command(name=\"duckgame\", help=\"Start the Duck Game!\")\n    async def duckgame_command(self, ctx: Context, amount: str):\n        bank_data = load_bank()\n        user_id = str(ctx.author.id)\n        if user_id not in bank_data:\n            bank_data[user_id] = {\"wallet\": 1000.0, \"bank\": 0.0, \"game_active\": False}",
        "detail": "commands.duckgame",
        "documentation": {}
    },
    {
        "label": "load_bank",
        "kind": 2,
        "importPath": "commands.duckgame",
        "description": "commands.duckgame",
        "peekOfCode": "def load_bank():\n    if not os.path.exists(\"data/bank.json\"):\n        return {}\n    with open(\"data/bank.json\", \"r\") as f:\n        data = json.load(f)\n    # Ensure all users have wallet, bank, and game_active keys\n    for user_id, balances in data.items():\n        if not isinstance(balances, dict):\n            data[user_id] = {\"wallet\": float(balances), \"bank\": 0.0, \"game_active\": False}\n        else:",
        "detail": "commands.duckgame",
        "documentation": {}
    },
    {
        "label": "update_bank",
        "kind": 2,
        "importPath": "commands.duckgame",
        "description": "commands.duckgame",
        "peekOfCode": "def update_bank(data):\n    with open(\"data/bank.json\", \"w\") as f:\n        json.dump(data, f, indent=4)\nclass DuckGameView(View):\n    def __init__(self, user, amount, wallet, multiplier, username):\n        super().__init__(timeout=None)\n        self.user = user\n        self.amount = float(amount)\n        self.position = -1  # Start duck in the grass\n        self.hazard_pos = None",
        "detail": "commands.duckgame",
        "documentation": {}
    },
    {
        "label": "get_duck_visual",
        "kind": 2,
        "importPath": "utils.assets",
        "description": "utils.assets",
        "peekOfCode": "def get_duck_visual(position: int, max_length=5) -> discord.File:\n    base_width = 100\n    base_height = 100\n    image_width = base_width * (max_length + 1)\n    image_height = base_height + duck.height  # ensures full fit\n    frames = []\n    try:\n        duck_path = os.path.join(BASE_DIR, \"..\", \"assets\", \"duck_images\", \"duck.png\")\n        duck = Image.open(duck_path).convert(\"RGBA\").resize((base_width, base_height))\n    except FileNotFoundError:",
        "detail": "utils.assets",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "utils.assets",
        "description": "utils.assets",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.abspath(__file__))\ndef get_duck_visual(position: int, max_length=5) -> discord.File:\n    base_width = 100\n    base_height = 100\n    image_width = base_width * (max_length + 1)\n    image_height = base_height + duck.height  # ensures full fit\n    frames = []\n    try:\n        duck_path = os.path.join(BASE_DIR, \"..\", \"assets\", \"duck_images\", \"duck.png\")\n        duck = Image.open(duck_path).convert(\"RGBA\").resize((base_width, base_height))",
        "detail": "utils.assets",
        "documentation": {}
    },
    {
        "label": "load_bank",
        "kind": 2,
        "importPath": "utils.bank",
        "description": "utils.bank",
        "peekOfCode": "def load_bank():\n    if not os.path.exists(BANK_FILE):\n        with open(BANK_FILE, \"w\") as f:\n            json.dump({}, f)\n    with open(BANK_FILE, \"r\") as f:\n        return json.load(f)\ndef save_bank(bank):\n    with open(BANK_FILE, \"w\") as f:\n        json.dump(bank, f, indent=4)\ndef get_balance(user_id):",
        "detail": "utils.bank",
        "documentation": {}
    },
    {
        "label": "save_bank",
        "kind": 2,
        "importPath": "utils.bank",
        "description": "utils.bank",
        "peekOfCode": "def save_bank(bank):\n    with open(BANK_FILE, \"w\") as f:\n        json.dump(bank, f, indent=4)\ndef get_balance(user_id):\n    bank = load_bank()\n    balance = bank.get(str(user_id), 1000.0)\n    print(f\"[DEBUG] get_balance: User {user_id} has ${balance}\")\n    return balance\ndef update_balance(user_id, amount):\n    bank = load_bank()",
        "detail": "utils.bank",
        "documentation": {}
    },
    {
        "label": "get_balance",
        "kind": 2,
        "importPath": "utils.bank",
        "description": "utils.bank",
        "peekOfCode": "def get_balance(user_id):\n    bank = load_bank()\n    balance = bank.get(str(user_id), 1000.0)\n    print(f\"[DEBUG] get_balance: User {user_id} has ${balance}\")\n    return balance\ndef update_balance(user_id, amount):\n    bank = load_bank()\n    user_id = str(user_id)\n    bank[user_id] = bank.get(user_id, 1000.0) + amount\n    save_bank(bank)",
        "detail": "utils.bank",
        "documentation": {}
    },
    {
        "label": "update_balance",
        "kind": 2,
        "importPath": "utils.bank",
        "description": "utils.bank",
        "peekOfCode": "def update_balance(user_id, amount):\n    bank = load_bank()\n    user_id = str(user_id)\n    bank[user_id] = bank.get(user_id, 1000.0) + amount\n    save_bank(bank)\n    print(f\"[DEBUG] update_balance: User {user_id} new balance is ${bank[user_id]}\")",
        "detail": "utils.bank",
        "documentation": {}
    },
    {
        "label": "BANK_FILE",
        "kind": 5,
        "importPath": "utils.bank",
        "description": "utils.bank",
        "peekOfCode": "BANK_FILE = \"data/bank.json\"\ndef load_bank():\n    if not os.path.exists(BANK_FILE):\n        with open(BANK_FILE, \"w\") as f:\n            json.dump({}, f)\n    with open(BANK_FILE, \"r\") as f:\n        return json.load(f)\ndef save_bank(bank):\n    with open(BANK_FILE, \"w\") as f:\n        json.dump(bank, f, indent=4)",
        "detail": "utils.bank",
        "documentation": {}
    },
    {
        "label": "generate_duck_game_image",
        "kind": 2,
        "importPath": "utils.image_generator",
        "description": "utils.image_generator",
        "peekOfCode": "def generate_duck_game_image(position: int, hazard_pos: int, previous_positions: list[int]) -> Image.Image:\n    # Load base road image\n    road = Image.open(\"assets/road/road.png\").convert(\"RGBA\")\n    grass = Image.open(\"assets/road/Grass.png\").convert(\"RGBA\")\n    duck = Image.open(\"assets/duck_images/duck.png\").convert(\"RGBA\")\n    car = Image.open(\"assets/road/car.png\").convert(\"RGBA\")\n    car = car.rotate(270, expand=True)\n    car = car.resize((car.width // 8, car.height // 8))\n    # Constants\n    tile_width = road.width",
        "detail": "utils.image_generator",
        "documentation": {}
    },
    {
        "label": "get_secure_hazard",
        "kind": 2,
        "importPath": "utils.rng",
        "description": "utils.rng",
        "peekOfCode": "def get_secure_hazard():\n    try:\n        hazard = secrets.randbelow(5)  # 0 to 4 inclusive\n        print(f\"[DEBUG] Secure hazard generated (Python): {hazard}\")\n        return hazard\n    except Exception as e:\n        print(f\"[ERROR] Failed to generate secure hazard: {e}\")\n        return 0  # Safe fallback",
        "detail": "utils.rng",
        "documentation": {}
    },
    {
        "label": "generate_duck_game_image",
        "kind": 2,
        "importPath": "views.duck_view",
        "description": "views.duck_view",
        "peekOfCode": "def generate_duck_game_image(position, hazard, duck_path, car_path, road_path, grass_path, bank=0, multiplier=1, save=False, game_started=False):\n    tile_width = 150\n    tile_height = 200\n    steps = 6\n    total_width = tile_width * steps\n    total_height = tile_height + 100  # Further increased for full canvas visibility\n    background = Image.new(\"RGBA\", (total_width, total_height), (0, 0, 0, 255))\n    try:\n        road_tile = Image.open(road_path).resize((tile_width, tile_height))\n    except Exception as e:",
        "detail": "views.duck_view",
        "documentation": {}
    },
    {
        "label": "TOKEN",
        "kind": 5,
        "importPath": "bot",
        "description": "bot",
        "peekOfCode": "TOKEN = os.getenv(\"DISCORD_TOKEN\")\nintents = discord.Intents.default()\nintents.message_content = True\nbot = commands.Bot(command_prefix=\"!\", intents=intents)\nbot.remove_command(\"help\")\n@bot.event\nasync def on_ready():\n    print(f\"✅ Logged in as {bot.user} (ID: {bot.user.id})\")\n    channel = bot.get_channel(1403244656845787170)\n    if channel:",
        "detail": "bot",
        "documentation": {}
    },
    {
        "label": "intents",
        "kind": 5,
        "importPath": "bot",
        "description": "bot",
        "peekOfCode": "intents = discord.Intents.default()\nintents.message_content = True\nbot = commands.Bot(command_prefix=\"!\", intents=intents)\nbot.remove_command(\"help\")\n@bot.event\nasync def on_ready():\n    print(f\"✅ Logged in as {bot.user} (ID: {bot.user.id})\")\n    channel = bot.get_channel(1403244656845787170)\n    if channel:\n        await channel.send(\"🟢 Duck Game Bot is now online!\")",
        "detail": "bot",
        "documentation": {}
    },
    {
        "label": "intents.message_content",
        "kind": 5,
        "importPath": "bot",
        "description": "bot",
        "peekOfCode": "intents.message_content = True\nbot = commands.Bot(command_prefix=\"!\", intents=intents)\nbot.remove_command(\"help\")\n@bot.event\nasync def on_ready():\n    print(f\"✅ Logged in as {bot.user} (ID: {bot.user.id})\")\n    channel = bot.get_channel(1403244656845787170)\n    if channel:\n        await channel.send(\"🟢 Duck Game Bot is now online!\")\nasync def setup():",
        "detail": "bot",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "bot",
        "description": "bot",
        "peekOfCode": "bot = commands.Bot(command_prefix=\"!\", intents=intents)\nbot.remove_command(\"help\")\n@bot.event\nasync def on_ready():\n    print(f\"✅ Logged in as {bot.user} (ID: {bot.user.id})\")\n    channel = bot.get_channel(1403244656845787170)\n    if channel:\n        await channel.send(\"🟢 Duck Game Bot is now online!\")\nasync def setup():\n    from commands import duckgame",
        "detail": "bot",
        "documentation": {}
    }
]